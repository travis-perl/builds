=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.33.9

=head1 DESCRIPTION

This document describes differences between the 5.33.8 release and the 5.33.9
release.

If you are upgrading from an earlier release such as 5.33.7, first read
L<perl5338delta>, which describes differences between 5.33.7 and 5.33.8.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Data::Dumper> has been upgraded from version 2.177 to 2.178.

=item *

L<ExtUtils::MakeMaker> has been upgraded from version 7.60 to 7.62.

=item *

L<ExtUtils::ParseXS> has been upgraded from version 3.42 to 3.43.

=item *

L<ExtUtils::Typemaps> has been upgraded from version 3.38 to 3.43.

=item *

L<feature> has been upgraded from version 1.63 to 1.64.

=item *

L<Module::CoreList> has been upgraded from version 5.20210320 to 5.20210420.

=item *

L<NEXT> has been upgraded from version 0.67_01 to 0.68.

=item *

L<perlfaq> has been upgraded from version 5.20201107 to 5.20210411.

=item *

L<XS::APItest> has been upgraded from version 1.15 to 1.16.

=back

=head1 Documentation

=over 4

=item *

L<perlguts> now explains in greater detail the need to consult SvUTF8
when calling SvPV (or variants). A new "How do I pass a Perl string to a C
library?" section in the same document discusses when to use which style of
macro to read an SV's string value.

L<perlapi>, L<perlguts>, L<perlxs>, and L<perlxstut> now prefer SvPVbyte
over SvPV.

=item *

References to B<Pumpking> have been replaced with a more accurate term or B<Steering Council> where appropriate.

=item *

L<perldiag> now documents additional examples of "not imported" warnings.

=item *

B<The Perl Steering Council> is now the fallback contact for security issues.

=item *

Simplify the split() documentation by removing the join()s from the examples (#18676)

Remove join() from split() examples as it confuses the concepts

split() is a very basic function, and the documentation should be
simple for novinces. The split() documentation contains a lot of join()
in the examples which only serve to muddle the concepts. This replaces
the join() in the example with output in comments.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Warnings

=over 4

=item *

L<Wide character in setenv key (encoding to utf8)|perldiag/"Wide character in %s">

Attempts to put wide characters into environment variable keys via C<%ENV> now
provoke this warning.

=back

=head1 Configuration and Compilation

=over 4

=item *

Prevented incpath to spill into libpth

=over 4

=item - Use realpath if available.

=item - This might catch more duplicate paths.

=item - Only include real existing paths.

=item - Filter inc paths out of libpth.

=back

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Windows

Reading non-ASCII characters from the console when its codepage was set to
65001 (UTF-8) was broken due to a bug in Windows. A workaround for this
problem has been implemented.
[L<GH #18701|https://github.com/Perl/perl5/issues/18701>]

=back

=head1 Internal Changes

=over 4

=item *

Corrected handling of double and long double parameters for perl's
implementation of formatted output for C<-Dusequadmath> builds.

This applies to PerlIO_printf(), croak(), warn(), sv_catpvf() and
their variants.

Previously in C<quadmath> builds, code like:

  PerlIO_printf(PerlIO_stderr(), "%g", somedouble);

or

  PerlIO_printf(PerlIO_stderr(), "%Lg", somelongdouble);

would erroneously throw an exception "panic: quadmath invalid format
...", since the code added for quadmath builds assumed C<NV>s were the
only floating point format passed into these functions.

This code would also process the standard C long double specifier C<L>
as if it expected an C<NV> (C<__float128> for quadmath builds),
resulting in undefined behaviour.

These functions now correctly accept doubles, long doubles and NVs.

=item *

Previously the right operand of bitwise shift operators (shift amount)
was implicitly cast from IV to int, but it might lead wrong results
if IV does not fit in int.

And also, shifting INT_MIN bits used to yield the shiftee unchanged
(treated as 0-bit shift instead of negative shift).

=back

=head1 Selected Bug Fixes

=over 4

=item *

Setting %ENV now properly handles upgraded strings in the key. Previously
Perl sent the SV's internal PV directly to the OS; now it will handle keys
as it has handled values since 5.18: attempt to downgrade the string first;
if that fails then warn and use the utf8 form.

=back

=head1 Acknowledgements

Perl 5.33.9 represents approximately 4 weeks of development since Perl
5.33.8 and contains approximately 3,900 lines of changes across 190 files
from 23 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 780 lines of changes to 82 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.33.9:

Dan Book, Dominic Hamon, E. Choroba, Ed J, Felipe Gasper, H.Merijn Brand,
Hugo van der Sanden, James E Keenan, John Lightsey, Karen Etheridge, Karl
Williamson, Marc Reisner, Max Maischein, Nicolas R., Paul Evans, Ricardo
Signes, Richard Leach, Scott Baker, TAKAI Kousuke, Todd Rinaldo, Tomasz
Konojacki, Tony Cook, Михаил Козачков.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
