=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.29.9

=head1 DESCRIPTION

This document describes differences between the 5.29.8 release and the 5.29.9
release.

If you are upgrading from an earlier release such as 5.29.7, first read
L<perl5298delta>, which describes differences between 5.29.7 and 5.29.8.

=head1 Core Enhancements

=head2 Wildcards in Unicode property value specifications are now
partially supported

You can now do something like this in a regular expression pattern

 qr! \p{nv= /(?x) \A [0-5] \z / }!

which matches all Unicode code points which have numeric value is
between 0 and 5 inclusive.

This marks another step in implementing the regular expression features
the Unicode Consortium suggests.

Most properties are supported, with the remainder planned for 5.32.
Details are in L<perlunicode/Wildcards in Property Values>.

=head2 qr'\N{name}' is now supported

Previously it was an error to evaluate a named character C<\N{...}>
within a single quoted regular expression pattern (whose evaluation is
deferred from the normal place).  This restriction is now removed.

=head2 Unicode 12.0 is supported

For details, see L<https://www.unicode.org/versions/Unicode12.0.0/>.

Because of a change in Unicode release cycles, Perl jumps from Unicode
10.0 in Perl 5.28 to Unicode 12.0 in Perl 5.30.

=head2 It is now possible to compile perl to always use thread-safe
locale operations.

Previously, these calls were only used when the perl was compiled to be
multi-threaded.  To always enable them, add

 -Accflags='-DUSE_THREAD_SAFE_LOCALE'

to your F<Configure> flags.


=head1 Security

=head2 Variable length lookbehind in regular expression pattern matching
is now experimentally supported

Using a lookbehind assertion (like C<(?<=foo)> or C<(?<!bar)> previously
would generate an error and refuse to compile.  Now it compiles (if the
maximum lookbehind is at most 255 characters), but raises a warning in
the new C<experimental::vlb> warnings category.  This is to caution you
that the precise behavior is subject to change based on feedback from
use in the field.

See L<perlre/(?<=pattern)> and L<perlre/(?<!pattern)>.

=head1 Incompatible Changes

=head2 C<pack()> no longer can return malformed UTF-8

It croaks if it would otherwise return a UTF-8 string that contains
malformed UTF-8.  This protects agains potential security threats.  This
is considered a bug fix as well ([perl #131642]).

=head2 Any set of digits in the Common script are legal in a script run
of another script

There are several sets of digits in the Common script.  C<[0-9]> is the
most familiar.  But there are also C<[\x{FF10}-\x{FF19}]> (FULLWIDTH
DIGIT ZERO - FULLWIDTH DIGIT NINE), and several sets for use in
mathematical notation, such as the MATHEMATICAL DOUBLE-STRUCK DIGITs.
Any of these sets should be able to appear in script runs of, say,
Greek.  But the design of 5.30 overlooked all but the ASCII digits
C<[0-9]>, so the design was flawed.  This has been fixed, so is both a
bug fix and an incompatibility. [perl #133547]

All digits in a run still have to come from the same set of ten digits.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Devel::PPPort> has been upgraded from version 3.44 to 3.45.

=item *

L<Encode> has been upgraded from version 3.00 to 3.01.

=item *

L<ExtUtils::Manifest> has been upgraded from version 1.71 to 1.72.

=item *

L<JSON::PP> has been upgraded from version 4.00 to 4.02.

=item *

L<Module::CoreList> has been upgraded from version 5.20190220 to 5.20190320.

=item *

L<perl5db.pl> has been upgraded from version 1.54 to 1.55.

Debugging threaded code no longer deadlocks in C<DB::sub> nor
C<DB::lsub>.

=item *

L<PerlIO::encoding> has been upgraded from version 0.26 to 0.27.

Warnings enabled by setting the C<WARN_ON_ERR> flag in
C<$PerlIO::encoding::fallback> are now only produced if warnings are
enabled with C<use warnings "utf8";> or setting C<$^W>.

=item *

L<threads::shared> has been upgraded from version 1.59 to 1.60.

Added support for extra tracing of locking, this requires a
C<-DDEBUGGING> and extra compilation flags.

=item *

L<utf8> has been upgraded from version 1.21 to 1.22.

=item *

L<warnings> has been upgraded from version 1.43 to 1.44.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 Changes to Existing Diagnostics

=over 4

=item *

Specifying C<\o{}> without anything between the braces now yields the
fatal error message "Empty \o{}".  Previously it was  "Number with no
digits".  This means the same wording is used for this kind of error as
with similar constructs such as C<\p{}>.

=item *

Within the scope of the experimental feature C<use re 'strict'>,
specifying C<\x{}> without anything between the braces now yields the
fatal error message "Empty \x{}".  Previously it was  "Number with no
digits".  This means the same wording is used for this kind of error as
with similar constructs such as C<\p{}>.  It is legal, though not wise
to have an empty C<\x> outside of C<re 'strict'>; it silently generates
a NUL character.

=back

=head1 Internal Changes

=over 4

=item *

Added C<newSVsv_nomg()> to copy a SV without processing get magic on
the source.  [perl #132964]

=back

=head1 Selected Bug Fixes

=over 4

=item *

C<pack()> no longer can return malformed UTF-8.  It croaks if it would
otherwise return a UTF-8 string that contains malformed UTF-8.  This
protects agains potential security threats.  [perl #131642]

=item *

See L</Any set of digits in the Common script are legal in a script run
of another script>.

=back

=head1 Acknowledgements

Perl 5.29.9 represents approximately 4 weeks of development since Perl
5.29.8 and contains approximately 47,000 lines of changes across 210 files
from 11 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 38,000 lines of changes to 71 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.29.9:

Chris 'BinGOs' Williams, Craig A. Berry, Dagfinn Ilmari Manns√•ker, Dan
Kogai, David Mitchell, Karen Etheridge, Karl Williamson, Nicolas R., Pali,
Tony Cook, Unicode Consortium.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
